<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>spring_series</artifactId>
        <groupId>com.yk.spring.pro</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <!--springboot-war 步骤(3) jar改为war-->
    <packaging>war</packaging>

    <artifactId>springboot_jsp_website</artifactId>

    <!-- 非parent的配置 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.3.2.RELEASE</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <!--logging 默认支持logback-->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--log4j2核心包-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.16.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.16.0</version>
        </dependency>
        <!--用于与slf4j保持桥接-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.16.0</version>
        </dependency>
        <!-- jsp支持依赖 Provided 编译和测试的时候使用-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>-->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.22</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.23</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
        </dependency>
    </dependencies>

    <!--1. 打成war包, webapp-views中的所有文件被打包到war中(在war的根目录中), 可直接执行启动war正常访问jsp页面-->
    <!--2. webapp-views中的所有文件只能被打包到/src/main/webapp/或者public或者static, 和工程的jar放在同一目录中, 可直接执行启动jar正常访问jsp页面-->
    <!--3. webapp-views中的所有文件被打包到jar的META-INF/resources目录中, 可直接执行启动jar正常访问jsp页面
           (前提是使用1.4.2.RELEASE版本的spring-boot-maven-plugin, 原因是： https://stackoverflow.com/questions/44689773/why-spring-boot-1-5-3-jar-does-not-recognise-jsp-files-in-src-main-resources-met)-->
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
                <excludes>
                    <exclude>assembly/*.*</exclude>
                </excludes>
            </resource>

            <!-- idea启动配置成这个也可以访问到jsp -->
            <resource>
                <directory>src/main/webapp-views</directory>
                <targetPath>META-INF/resources</targetPath>
            </resource>
        </resources>
        <plugins>
            <!--不使用parent的构建方式，那么spring-boot-maven-plugin 必须加上repackage，
                才能打包出springboot特定的jar(内部包含所有依赖，以spring-boot-loader模块启动
                (MANIFEST.MF指定的Main-Class是spring提供的，有它来启动我们工程的Main)) -->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.2</version>
                <configuration>
                    <mainClass>com.yk.JspApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 该插件负责把src/main/webapp-views/打包到/src/main/webapp/或者public或者static,
                 spring-boot-maven-plugin 负责打包工程为jar, 最后生成zip文件中包含两者, 解压zip后执行jar可访问到jsp -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <finalName>${project.name}</finalName>
                            <descriptors>
                                <descriptor>/src/main/resources/assembly/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->

            <!--假设不使用spring-boot-maven-plugin，
                使用maven-jar-plugin和maven-assembly-plugin也可以打包
                (一个zip包内，包含了所有依赖和工程jar,MANIFEST.MF也会指定Main-Class和lib)
                但是这种打包出来的包不能以spring-boot-loader模块的方式跑, 是以Java的传统模式启动的，
                有一个显著的问题就是src/main/webapp/下的jsp无法响应请求-->

            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>com.yk.JspApplication</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>&lt;!&ndash; 配置执行器 &ndash;&gt;
                        <id>make-assembly</id>
                        <phase>install</phase>&lt;!&ndash; 绑定到package生命周期阶段上 &ndash;&gt;
                        <goals>
                            <goal>single</goal>&lt;!&ndash; 只运行一次 &ndash;&gt;
                        </goals>
                        <configuration>
                            <finalName>${project.name}</finalName>
                            <descriptor>/src/main/resources/assembly/assembly.xml</descriptor>&lt;!&ndash;配置描述文件路径&ndash;&gt;
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->


            <!--springboot-war 步骤(4) maven-war-plugin 和 spring-boot-maven-plugin同时启用-->
            <!--3.0版本插件不存在web.xml缺少时无法打包的情况-->
            <!-- springboot工程打包成war时, src/main/webapp-views中的资源和jsp被打包到war中(在war的根目录中), 通过DocumentRoot.getWarFileDocumentRoot获取jsp资源-->
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <webResources>
                        <resource>
                            <directory>src/main/webapp-views</directory>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>


            <!--<plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                        <target name="jsp2java">
                            <taskdef classname="org.apache.jasper.JspC" name="jsp2java">
                                <classpath id="jsp2java.classpath">
                                    <fileset dir="${tomcat.home}/bin">
                                        <include name="*.jar"/>
                                    </fileset>
                                    <fileset dir="${tomcat.home}/lib">
                                        <include name="*.jar"/>
                                    </fileset>
                                </classpath>
                            </taskdef>
                            <jsp2java classpath="jsp2java.classpath" javaEncoding="UTF-8" validateXml="false"
                                      uriroot="${webapp.path}/WebRoot"
                                      webXmlFragment="${webapp.path}/WebRoot/WEB-INF/webJSP.xml"
                                      outputDir="${webapp.path}/WebRoot/WEB-INF/JspC/src"/>
                    </target>
                </configuration>
            </plugin>-->
        </plugins>
    </build>
</project>