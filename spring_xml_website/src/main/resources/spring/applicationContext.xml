<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/cache
      http://www.springframework.org/schema/cache/spring-cache.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--<context:component-scan/>标签是告诉Spring 来扫描指定包下的类，
    并注册被@Component，@Controller，@Service，@Repository等注解标记的组件。
    而<context:annotation-config/>是告知Spring，我们启用注解驱动。
    然后Spring会自动为我们注册上面说到的几个Bean到工厂中，来处理我们的请求。-->
    <context:component-scan base-package="com.yk"/>

    <!--使用<context:annotation- config/>隐式地向 Spring容器注册
    AutowiredAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor、
    CommonAnnotationBeanPostProcessor以及PersistenceAnnotationBeanPostProcessor
    这4个BeanPostProcessor-->
    <!--有component-scan不再需要annotation-config -->
    <context:annotation-config/>

    <bean class="com.yk.base.config.EncryptPropertyPlaceholderConfigurer"
          p:location="classpath:druid.properties" p:fileEncoding="UTF-8"/>


    <!--<context:property-placeholder location="classpath:druid.properties" ignore-unresolvable="true"/>-->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最大空闲
        <property name="maxIdle" value="20" />
        -->
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="5"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <!--
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
        -->
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="3600"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>

        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="stat"/>
        <!--<property name="filters" value="mergeStat" /> -->
        <!-- Oracle连接是获取字段注释 -->
        <property name="connectProperties">
            <props>
                <prop key="remarksReporting">true</prop>
            </props>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="configLocation" value=""></property>-->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
        <property name="typeAliasesPackage" value="com.yk.demo.model"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 接口模式 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored. -->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
        <property name="basePackage" value="com.yk.demo.dao"/>
    </bean>

    <!-- 注解和切面事务 二选一即可 -->
    <!-- ↓配置注解事务↓ -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 对@Transactional 注解的Bean进行讲过处理，以织入事务管理切面 相当于 @EnableTransactionManagement(proxyTargetClass = true) -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!-- ↑配置注解事务↑ -->


    <!-- ↓配置切面事务↓ -->
    <!--Spring 定义的POJO切面 没有配置注解事务的时候 该切面可以自动为符合的expression的方法或者类增加事务管理 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod" expression="(execution(* com.yk..service..*(..)))
        and (@annotation(org.springframework.transaction.annotation.Transactional))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*"/>
            <!--<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />-->
        </tx:attributes>
    </tx:advice>
    <!-- ↑配置切面事务↑ -->


    <!-- 通知Spring 开启扫描 @Aspect 切面编程自动代理 相当于 @EnableAspectJAutoProxy(proxyTargetClass = true) -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--开启注解扫描 -->
    <!--
        这个配置会自动注册三个类
        RequestMappingHandlerMapping
        RequestMappingHandlerAdapter
        ExceptionHandlerExceptionResolver
        以支持使用注解@Controller的注解方法（如@RequestMapping、@ExceptionHandler）来处理request，
        并开启一系列默认功能设置，有了这个配置，就能将所有请求映射到@Controller修饰的handler上，
        以及对应的@RequestMapping上，仅仅配置这个，可以处理数据接口，但是无法映射静态资源，这时我们再添加一个配置即可
    -->
    <mvc:annotation-driven>
        <!-- use for converting @RequestBody method parameters and @ResponseBody method return values -->
        <!-- 当Controller配置的是ResponseBody, 默认会使用message-converts -->
        <!-- 所以当controller 返回 return "index" 或者 ModelMap时,不能使用@ResponseBody -->
        <!-- ModelAndView没有该限制 -->
        <mvc:message-converters>
            <!--Http请求默认字符集ISO-8859-1 ，Spring中也是此字符集，需要手动配置以解决中文乱码问题-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg value="text"/>
                            <constructor-arg value="plain"/>
                            <constructor-arg value="UTF-8"/>
                        </bean>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
    </bean>
</beans>