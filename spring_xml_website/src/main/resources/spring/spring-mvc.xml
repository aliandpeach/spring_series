<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/cache
      http://www.springframework.org/schema/cache/spring-cache.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html" />
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>-->

    <!-- 下面两个配置只在DispatcherServlet拦截所有请求的情况下配置即可-->
    <mvc:default-servlet-handler/> <!-- DispatcherServlet 拦截了所有请求包括静态资源，开启这个配置，就可以直接访问除安全目录外的其他静态资源 -->
    <mvc:resources mapping="/jquery/**" location="/plugin/jquery/"/>
    <!-- 如果mvc工程要使用swagger, 必须像springboot的WebMvcAutoConfiguration自动配置那样, 手动增加路径映射 -->
    <!--<bean name="swaggerConfig" class="com.swagger.config.SwaggerConfig"/>
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />-->

    <bean id="templateResolver"
          class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/templates/"/>
        <property name="suffix" value=".html"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="order" value="1"/>
        <property name="templateMode" value="HTML"/>
        <property name="cacheable" value="false"/>
    </bean>

    <bean id="templateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver"/>
    </bean>

    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine"/>
        <property name="characterEncoding" value="UTF-8"/>
    </bean>

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 指定所上传文件的总大小100M,单位字节B。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="102400000"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="102400"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="useCodeAsDefaultMessage" value="true"/>
        <property name="basenames">
            <list>
                <value>classpath:/i18n/message</value>
            </list>
        </property>
    </bean>

    <bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
        <!-- 自定义时间字符串转Date -->
        <property name="deserializersByType">
            <map key-type="java.lang.Class">
                <entry key="java.util.Date" value-ref="dateJacksonConverter"/>
            </map>
        </property>
        <!-- 自定义Date转字符串格式 -->
        <!--<property name="serializersByType">
            <map key-type="java.util.Date">
                <entry key="java.lang.String" value-ref="dateJacksonConverter"/>
            </map>
        </property>-->
    </bean>

    <!-- 自定义Date转字符串格式 -->
    <!--<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
        <property name="dateFormat">
            <bean class="java.text.SimpleDateFormat">
                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
            </bean>
        </property>
    </bean>-->

    <!-- 待验证 DateConverterConfig 和 DateJacksonConverter 哪个在前端到后台传参中被使用 -->
    <!--注册类型转换器GoodsConverter-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.yk.base.config.DateConverterConfig"/>
            </list>
        </property>
    </bean>

    <bean id="conversionService1" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.yk.base.config.DateConverterConfig"/>
            </list>
        </property>
    </bean>

    <!--
        这个配置会自动注册三个类
        RequestMappingHandlerMapping
        RequestMappingHandlerAdapter
        ExceptionHandlerExceptionResolver
        以支持使用注解@Controller的注解方法（如@RequestMapping、@ExceptionHandler）来处理request，
        并开启一系列默认功能设置，有了这个配置，就能将所有请求映射到@Controller修饰的handler上，
        以及对应的@RequestMapping上，仅仅配置这个，可以处理数据接口，但是无法映射静态资源，这时我们再添加一个<mvc:default-servlet-handler />配置即可
    -->
    <!--content-negotiation-manager为内容协商管理, 暂时不实现-->
    <mvc:annotation-driven> <!--content-negotiation-manager="contentNegotiationManager" conversion-service="conversionService"-->
        <!-- use for converting @RequestBody method parameters and @ResponseBody method return values -->
        <!-- 当Controller配置的是ResponseBody, 默认会使用message-converts -->
        <!-- 所以当controller 返回 return "index" 或者 ModelMap时,不能使用@ResponseBody -->
        <!-- ModelAndView没有该限制 -->
        <mvc:message-converters>
            <!--Http请求默认字符集ISO-8859-1 ，Spring中也是此字符集，需要手动配置以解决中文乱码问题-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <bean class="org.springframework.http.MediaType">
                            <constructor-arg value="text"/>
                            <constructor-arg value="plain"/>
                            <constructor-arg value="UTF-8"/>
                        </bean>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <!-- spring mvc 使用自定义 objectMapper, 可实现Date转前端字符串格式 -->
                <property name="objectMapper" ref="objectMapper"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:view-controller path="/" view-name="redirect:/index"/>
</beans>