<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <context-param>
        <param-name>log4jConfiguration</param-name>
        <param-value>classpath:log4j2.xml</param-value>
    </context-param>

    <listener>
        <listener-class>
            org.apache.logging.log4j.web.Log4jServletContextListener
        </listener-class>
    </listener>

    <!-- 这里不配置的话，Spring 会默认通过 ContextLoader.properties 的配置来初始化 XmlWebApplicationContext-->
    <!--<context-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.web.context.support.XmlWebApplicationContext</param-value>
    </context-param>-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:spring/applicationContext.xml</param-value>
    </context-param>
    <!-- 用于初始化 XmlWebApplicationContext -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
        在整合spring容器时使用ContextLoaderListener，它实现了ServletContextListener监听器接口，
        ServletContextListener只负责监听web容器启动和关闭的事件。

        而RequestContextListener实现ServletRequestListener监听器接口，
        该监听器监听HTTP请求事件，web服务器接收的每一次请求都会通知该监听器。

        spring容器启动和关闭操作由web容器的启动和关闭事件触发，
        但如果spring容器中的Bean需要request，session，globalsession作用域的支持，
        spring容器本身就必须获得web容器的HTTP请求事件，以HTTP请求的事件”驱动”Bean作用域的控制逻辑
    -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- 用于注解的启动配置 -->
    <!--<context-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </context-param>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>com.yk.AppConfig</param-value>
    </context-param>-->

    <!--
        在DispatcherServlet的初始化过程中，
        框架会在web应用的WEB-INF文件夹下默认寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。
        如以下默认寻找dispatcher-servlet.xml
    -->

    <!--
        在Spring Web应用程序中，有两种类型的容器，ApplicationContext和WebApplicationContext.
        ApplicationContext是由ContextLoaderListener创建并配置的或Web.xml。
        而WebApplicationContext是ApplicationContext的子上下文环境。是由DispatcherServlet 启动时创建配置的

        DispatcherServlet 和 ContextLoaderListener之间的关系。
        所以说如果没有配置listener参数，只配置了dispatcherServlet时，tomcat启动时是不会初始化Spring Web上下文的，
        因为Spring Web是基于Spring的，你没有配置Spring，所以也不会启动它的子上下文Spring Web
    -->
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    
    <!--<welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>-->

    <!--
    <tracking-mode>用于表示容器应该使用哪种技术追踪会话ID，它的合法值有：

    ·URL -> 容器将只在URL中内嵌会话ID，不使用cookie或SSL会话ID，这种方式非常不安全。

    ·COOKIE -> 容器将使用会话cookie追踪会话ID，该技术非常安全。

    ·SSL -> 容器将使用SSL会话ID作为HTTP会话ID，该方法是最安全的方式，但要求使用的所有请求都必须是HTTPS请求。

    也可以为<tracking-mode>配置多个值，表示容器可以使用多种策略。

    只有在追踪模式中使用了COOKIE时，才可以使用<cookie-config>标签。
    -->

    <session-config>
        <cookie-config>
            <secure>true</secure>
            <http-only>true</http-only>
        </cookie-config>
        <tracking-mode>COOKIE</tracking-mode>
        <session-timeout>5</session-timeout>
    </session-config>

    <login-config>
        <auth-method>CLIENT-CERT</auth-method>
        <realm-name>Client Cert Users-only Area</realm-name>
    </login-config>
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>secure</web-resource-name>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
</web-app>
