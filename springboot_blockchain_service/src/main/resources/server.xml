<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- Note:  A "Server" is not itself a "Container", so you may not
     define subcomponents such as "Valves" at this level.
     Documentation at /docs/config/server.html
 -->
<Server port="8005" shutdown="SHUTDOWN">
    <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
    <!-- Security listener. Documentation at /docs/config/listeners.html
    <Listener className="org.apache.catalina.security.SecurityListener" />
    -->
    <!--APR library loader. Documentation at /docs/apr.html -->
    <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
    <!-- Prevent memory leaks due to use of particular java/javax APIs-->
    <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
    <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
    <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

    <!-- Global JNDI resources
         Documentation at /docs/jndi-resources-howto.html
    -->
    <GlobalNamingResources>
        <!-- Editable user database that can also be used by
             UserDatabaseRealm to authenticate users
        -->
        <Resource name="UserDatabase" auth="Container"
                  type="org.apache.catalina.UserDatabase"
                  description="User database that can be updated and saved"
                  factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                  pathname="conf/tomcat-users.xml" />
    </GlobalNamingResources>

    <!-- A "Service" is a collection of one or more "Connectors" that share
         a single "Container" Note:  A "Service" is not itself a "Container",
         so you may not define subcomponents such as "Valves" at this level.
         Documentation at /docs/config/service.html
     -->
    <Service name="Catalina">

        <!--The connectors can use a shared executor, you can define one or more named thread pools-->
        <!--
        <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
            maxThreads="150" minSpareThreads="4"/>
        -->


        <!-- A "Connector" represents an endpoint by which requests are received
             and responses are returned. Documentation at :
             Java HTTP Connector: /docs/config/http.html
             Java AJP  Connector: /docs/config/ajp.html
             APR (HTTP/AJP) Connector: /docs/apr.html
             Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
        -->
        <Connector executor="tomcatThreadPool"
                   port="80" protocol="org.apache.coyote.http11.Http11NioProtocol"
                   connectionTimeout="8000"
                   URIEncoding="UTF-8"
                   enableLookups="false"
                   allowTrace="false"
                   acceptCount="100"
                   maxThreads="5000"
                   maxPostSize="-1"
                   redirectPort="443"
                   server=" " />
        <!--
        <Connector port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" />
        -->
        <!-- A "Connector" using the shared thread pool-->
        <!--
        <Connector executor="tomcatThreadPool"
                   port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" />
        -->
        <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443
             This connector uses the NIO implementation. The default
             SSLImplementation will depend on the presence of the APR/native
             library and the useOpenSSL attribute of the
             AprLifecycleListener.
             Either JSSE or OpenSSL style configuration may be used regardless of
             the SSLImplementation selected. JSSE style configuration is used below.
        -->

        <!--
           <Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"
                      maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
                      clientAuth="false" sslProtocol="TLS" />
           -->
        <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
             This connector uses the APR/native implementation which always uses
             OpenSSL for TLS.
             Either JSSE or OpenSSL style configuration may be used. OpenSSL style
             configuration is used below.
        -->

        <!-- keepAliveTimeout 和 connectionTimeout -->
        <!-- keepAliveTimeout 表示保持的tcp长链接在没有请求进来开始计算, Keep-Alive Timeout时间内还没有请求进来就不再保留该长链接 -->
        <!--
            客户端浏览器向Web服务器发出的Http请求被响应后建立的TCP/IP连接并不会被立刻释放掉,而是会存在一段时间,这个时间叫Keep-Alive Timeout,
            如果在Keep-Alive Timeout时间内没有新的Http请求从客户端发送到服务器端,
            那么建立的TCP/IP连接就会被服务器端释放掉,如果在Keep-Alive Timeout时间内又有Http请求从客户端浏览器发送到了服务器端,
            那么服务器端又会等待Keep-Alive Timeout时间后才会释放TCP/IP连接

            从上面我们知道了如果服务器端启用了Keep-Alive机制,那么有两种情况建立的TCP/IP连接会被正常释放,
            一是在Keep-Alive Timeout时间内没有新的Http请求复用TCP/IP连接,那么TCP/IP连接就会被服务器端释放,
            二是当建立的TCP/IP连接被复用了max次后,max的值已经为0,服务器端也会释放TCP/IP连接

            浏览器在请求的头部添加 Connection:Keep-Alive,以此告诉服务器"我支持长连接,你支持的话就和我建立长连接吧",
            而倘若服务器的确支持长连接,那么就在响应头部添加"Connection:Keep-Alive", 从而告诉浏览器"我的确也支持,那我们建立长连接吧".
            服务器还可以通过 Keep-Alive:timeout=10, max=100 的头部告诉浏览器"我希望10秒计算算超时时间,最长不能超过 100 秒"
        -->

        <!--
            HTTP版本	描述
            HTTP/1.0	在 HTTP/1.0 中,除非客户端在请求中发送 Connection: keep-alive 标头,否则连接不被视为持久连接.当服务器接受持久连接请求时,它会将 Connection: keep-alive 标头发送回客户端作为响应.之后,连接保持打开状态,客户端使用同一连接发送其他请求.连接将保持打开状态,直到客户端或服务器断开连接.
            HTTP/1.1	在 HTTP/1.1 中,除非另有说明,否则所有连接都被视为持久连接,并且不需要额外的 Connection: keep-alive 标头来建立持久连接.例如,Apache httpd 1.3 和 2.0 的默认连接超时为 15 秒,而 Apache httpd 2.2 及更高版本仅为 5 秒.短超时的好处是可以快速交付多个网页组件,而不用太长时间运行多个服务器进程或线程而占用资源.
            HTTP/2	    Connection 和 Keep-Alive 标头在 HTTP/2 中是不允许的.Chrome 和 Firefox 在 HTTP/2 响应中忽略这些标头,但如果服务器错误地返回这些标头,Safari 将不会加载网页.
        -->

        <!-- connectionTimeout 服务器在连接关闭之前等待客户端发出请求的最长时间, 也就是只建立了tcp连接, 但是没有真正的请求进来的一些请求(通过构造一些特殊的数据包,可实现这类tomcat慢攻击) -->
        <Connector port="443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                   SSLEnabled="true"
                   maxThreads="500" scheme="https" secure="true"
                   URIEncoding="UTF-8"
                   connectionTimeout="8000"
                   keepAliveTimeout="6000"
                   clientAuth="false"
                   allowTrace="false"
                   keystoreFile="${catalina.base}/conf/ssl/key.keystore"
                   keystorePass=""
                   ciphers="TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256"
                   sslProtocol="TLS" sslEnabledProtocols="TLSv1.2"
                   server=" "
        />
        <!-- Define an AJP 1.3 Connector on port 8009
        <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />
    -->

        <!-- An Engine represents the entry point (within Catalina) that processes
             every request.  The Engine implementation for Tomcat stand alone
             analyzes the HTTP headers included with the request, and passes them
             on to the appropriate Host (virtual host).
             Documentation at /docs/config/engine.html -->

        <!-- You should set jvmRoute to support load-balancing via AJP ie :
        <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
        -->
        <Engine name="Catalina" defaultHost="localhost">

            <!--For clustering, please take a look at documentation at:
                /docs/cluster-howto.html  (simple how to)
                /docs/config/cluster.html (reference documentation) -->
            <!--
            <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
            -->

            <!-- Use the LockOutRealm to prevent attempts to guess user passwords
                 via a brute-force attack -->
            <Realm className="org.apache.catalina.realm.LockOutRealm">
                <!-- This Realm uses the UserDatabase configured in the global JNDI
                     resources under the key "UserDatabase".  Any edits
                     that are performed against this UserDatabase are immediately
                     available for use by the Realm.  -->
                <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                       resourceName="UserDatabase"/>
            </Realm>

            <Host name="localhost"  appBase="webapps"
                  unpackWARs="true" autoDeploy="true">

                <!-- SingleSignOn valve, share authentication between web applications
                     Documentation at: /docs/config/valve.html -->
                <!--
                <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
                -->

                <!-- Access log processes all example.
                     Documentation at: /docs/config/valve.html
                     Note: The pattern used is equivalent to using pattern="common" -->
                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                       prefix="localhost_access_log" suffix=".txt"
                       pattern="%h %l %u %t &quot;%r&quot; %s %b" />

            </Host>
        </Engine>
    </Service>
</Server>